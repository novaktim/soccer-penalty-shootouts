floor(results$Season_End_Year / 10) * 10
decade = floor(results$Season_End_Year / 10) * 10
relative_shootouts = results[, .(Shootouts = mean(grepl("won on penalty kicks following", Notes)) * 100, .N), by = decade_id]
relative_shootouts = results[, .(Shootouts = mean(grepl("won on penalty kicks following", Notes)) * 100, .N), by = decade]
View(relative_shootouts)
ggplot(relative_shootouts, aes(y = reorder(Season_End_Year, Shootouts), x = Shootouts)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
#theme_minimal() +
labs(title = "% Penalty Shootout happening by League",
x = "Percentage of matches",
y = "League")
ggplot(relative_shootouts, aes(x = Season_End_Year, y = Shootouts)) +
geom_line(color = "skyblue") +
geom_point() + # Optionally add points for each year
labs(title = "Yearly Values", x = "Year", y = "Value") +
theme_minimal()
decade = floor(results$Season_End_Year / 10) * 10
relative_shootouts = results[, .(Shootouts = mean(grepl("won on penalty kicks following", Notes)) * 100, .N), by = decade]
ggplot(relative_shootouts, aes(x = Season_End_Year, y = Shootouts)) +
geom_line(color = "skyblue") +
geom_point() + # Optionally add points for each year
labs(title = "Yearly Values", x = "Year", y = "Value") +
theme_minimal()
ggplot(relative_shootouts, aes(x = decade, y = Shootouts)) +
geom_line(color = "skyblue") +
geom_point() + # Optionally add points for each year
labs(title = "Yearly Values", x = "Year", y = "Value") +
theme_minimal()
ggplot(relative_shootouts, aes(x = decade, y = Shootouts)) +
geom_line(color = "skyblue") +
geom_point() + # Optionally add points for each year
labs(title = "% Penalty Shootout happening by League",
x = "Decade",
y = "Percentage of eligible matches")
ggplot(relative_shootouts, aes(x = decade, y = Shootouts)) +
geom_line(color = "skyblue") +
geom_point() + # Optionally add points for each year
labs(title = "% Penalty Shootout happening by League",
x = "Decade",
y = "Percentage of eligible matches") +
theme_minimal()
relative_shootouts = results[, .(Shootouts = mean(grepl("won on penalty kicks following", Notes)) * 100), by = "Competition_Name"]
ggplot(relative_shootouts, aes(y = reorder(Competition_Name, Shootouts), x = Shootouts)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
#theme_minimal() +
labs(title = "% Penalty Shootout happening by League",
x = "Percentage of eligible matches",
y = "League")
decade = floor(results$Season_End_Year / 10) * 10
relative_shootouts = results[, .(Shootouts = mean(grepl("won on penalty kicks following", Notes)) * 100, .N), by = decade]
ggplot(relative_shootouts, aes(x = decade, y = Shootouts)) +
geom_line(color = "skyblue") +
geom_point() + # Optionally add points for each year
labs(title = "% Penalty Shootout happening by League",
x = "Decade",
y = "Percentage of eligible matches")
ggplot(relative_shootouts, aes(x = decade, y = Shootouts)) +
geom_line(color = "skyblue") +
geom_point() + # Optionally add points for each year
labs(title = "% Penalty Shootout happening by League",
x = "Decade",
y = "Percentage of eligible matches") +
theme_minimal()
ggplot(relative_shootouts, aes(x = decade, y = Shootouts)) +
geom_line(color = "skyblue") +
geom_point() + # Optionally add points for each year
labs(title = "% Penalty Shootout happening by Decade",
x = "Decade",
y = "Percentage of eligible matches") +
theme_minimal()
# iterate through score progression
for (i in seq_along(shootouts)) {
shootout = shootouts[[i]]
scores = strsplit(shootout$Score_Progression, ":")
shootout$Score_Progression_Home = as.numeric(sapply(scores, function(x) x[1]))
shootout$Score_Progression_Away = as.numeric(sapply(scores, function(x) x[2]))
score_before_home = c(0, shootout$Score_Progression_Home[-nrow(shootout)])
score_before_away = c(0, shootout$Score_Progression_Away[-nrow(shootout)])
shootout$Has_Scored_Home = shootout$Score_Progression_Home > score_before_home
shootout$Has_Scored_Away = shootout$Score_Progression_Away > score_before_away
team_started_shootout = shootout$Penalty_Number %% 2 == 1
# If the next scored goal is deciding to win
# e.g. after 5 rounds: 1:0, 2:1, 3:2, 4:3,... for starter team, 0:0, 1:1, 2:2, 3:3, 4:4, 5:5,... for non-starter team
score_own = ifelse(shootout$Home_Away == "Home", score_before_home, score_before_away)[team_started_shootout]
score_opponent = ifelse(shootout$Home_Away == "Home", score_before_away, score_before_home)[team_started_shootout]
possible_remaining_goals = pmax(1, 6 - 1:length(score_own))
score_opponent_possible = score_opponent + possible_remaining_goals
shootout[team_started_shootout, "Is_Decisive_To_Win"] = score_own + 1 > score_opponent_possible
score_own = ifelse(shootout$Home_Away == "Home", score_before_home, score_before_away)[!team_started_shootout]
score_opponent = ifelse(shootout$Home_Away == "Home", score_before_away, score_before_home)[!team_started_shootout]
possible_remaining_goals = pmax(0, 5 - 1:length(score_own)) # one less because opponent already shot first
score_opponent_possible = score_opponent + possible_remaining_goals
shootout[!team_started_shootout, "Is_Decisive_To_Win"] = score_own + 1 > score_opponent_possible
# If the next missed goal is deciding to lose
# e.g. after 3 rounds: 1:3 for starter team, 1:3, for non-starter team
score_own = ifelse(shootout$Home_Away == "Home", score_before_home, score_before_away)[team_started_shootout]
score_opponent = ifelse(shootout$Home_Away == "Home", score_before_away, score_before_home)[team_started_shootout]
possible_remaining_goals = pmax(0, 5 - 1:length(score_own))
score_possible = score_own + possible_remaining_goals
shootout[team_started_shootout, "Is_Decisive_To_Lose"] = score_possible < score_opponent
score_own = ifelse(shootout$Home_Away == "Home", score_before_home, score_before_away)[!team_started_shootout]
score_opponent = ifelse(shootout$Home_Away == "Home", score_before_away, score_before_home)[!team_started_shootout]
possible_remaining_goals = pmax(0, 5 - 1:length(score_own))
score_possible = score_own + possible_remaining_goals
shootout[!team_started_shootout, "Is_Decisive_To_Lose"] = score_possible < score_opponent
shootouts[[i]] = shootout
}
library(data.table)
all_shootouts = do.call(rbind, shootouts)
all_shootouts$hasScored = all_shootouts$Has_Scored_Home | all_shootouts$Has_Scored_Away
all_shootouts$team_started_shootout = all_shootouts$Penalty_Number %% 2 == 1
print(mean(all_shootouts$hasScored))
print(data.table(all_shootouts)[, .("Mean True Win" = mean(Is_Decisive_To_Win),
"Mean True Lose" = mean(Is_Decisive_To_Lose)), by = c("Home_Away", "team_started_shootout")])
print(data.table(all_shootouts)[, .("Mean True Win" = mean(Is_Decisive_To_Win),
"Mean True Lose" = mean(Is_Decisive_To_Lose)), by = c("team_started_shootout")])
View(all_shootouts)
View(shootout)
# Winning chance when starting shootout
sapply(shootouts, function(x) x$Home_Away[1])
# Winning chance when starting shootout
who_started = sapply(shootouts, function(x) x$Home_Away[1])
who_started
sapply(shootouts, function(x) x$Score_Progression_Home[1])
sapply(shootouts, function(x) x$Score_Progression_Home[nrow(x)])
sapply(shootouts, function(x) x$Score_Progression_Home[nrow(x)] - x$Score_Progression_Away[nrow(x)])
table(sapply(shootouts, function(x) x$Score_Progression_Home[nrow(x)] - x$Score_Progression_Away[nrow(x)]))
dif = sapply(shootouts, function(x) x$Score_Progression_Home[nrow(x)] - x$Score_Progression_Away[nrow(x)])
ifelse(dif > 0, "Home", "Away")
who_won = ifelse(dif > 0, "Home", "Away")
who_started
# Winning chance when starting shootout
who_started = sapply(shootouts, function(x) x$Home_Away[1])
dif = sapply(shootouts, function(x) x$Score_Progression_Home[nrow(x)] - x$Score_Progression_Away[nrow(x)])
who_won = ifelse(dif > 0, "Home", "Away")
who_started == who_won
mean(who_started == who_won)
mean(who_started != who_won)
table(who_started == who_won)
##### Scrape only matches with a penalty shootout #####
library(plyr)
all_results = do.call(rbind.fill, lapply(list.files("data/fbref_match_results", full.names = T), readRDS))
# Percentage of games that lead to a Penalty Shootout by League
library(data.table)
library(ggplot2)
tab = table(all_results$Round[grepl("won on penalty kicks following", all_results$Notes)])
print(tab)
# Remove games where no shootout possible by rule
results = data.table(all_results[all_results$Round %in% names(tab),])
relative_shootouts = results[, .(Shootouts = mean(grepl("won on penalty kicks following", Notes)) * 100), by = "Competition_Name"]
ggplot(relative_shootouts, aes(y = reorder(Competition_Name, Shootouts), x = Shootouts)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
#theme_minimal() +
labs(title = "% Penalty Shootout happening by League",
x = "Percentage of eligible matches",
y = "League")
##### Load in all penalty shootouts #####
library(plyr)
library(lubridate)
files = list.files("data/fbref_match_summary", full.names = T)
shots = do.call(rbind.fill, lapply(files, readRDS))
shots$Gender = all_results$Gender[match(shots$Game_URL, all_results$MatchURL)]
shots = shots[shots$Event_Type == "Penalty Shootout", ]
shots = shots[order(shots$Game_URL, shots$Penalty_Number),]
shootouts = split(shots, shots$Game_URL)
# Count the years of shootouts
matchdates = as.Date(sapply(shootouts, function(x) x$Match_Date[1]))
leagues = sapply(shootouts, function(x) x$League[1])
genders = sapply(shootouts, function(x) x$Gender[1])
# Create the bar plot by Year
tab = table(year(matchdates))
data = data.frame(Year = names(tab), Count = as.numeric(tab))
ggplot(data, aes(x = Year, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
#theme_minimal() +
labs(title = "Penalty Shootouts by Year",
x = "Year",
y = "# Penalty Shootouts")
# Create the bar plot by League
tab = table(leagues)
data = data.frame(League = names(tab), Count = as.numeric(tab))
data = data[order(data$Count),]
ggplot(data, aes(y = reorder(League, Count), x = Count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
#theme_minimal() +
labs(title = "Penalty Shootouts by League",
x = "# Penalty Shootouts",
y = "League")
# Create the bar plot by Gender
tab = table(genders)
data = data.frame(Gender = ifelse(names(tab) == "F", "Female", "Male"), Count = as.numeric(tab))
ggplot(data, aes(x = Gender, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
#theme_minimal() +
labs(title = "Penalty Shootouts by Gender",
x = "Gender",
y = "# Penalty Shootouts")
# iterate through score progression
for (i in seq_along(shootouts)) {
shootout = shootouts[[i]]
scores = strsplit(shootout$Score_Progression, ":")
shootout$Score_Progression_Home = as.numeric(sapply(scores, function(x) x[1]))
shootout$Score_Progression_Away = as.numeric(sapply(scores, function(x) x[2]))
score_before_home = c(0, shootout$Score_Progression_Home[-nrow(shootout)])
score_before_away = c(0, shootout$Score_Progression_Away[-nrow(shootout)])
shootout$Has_Scored_Home = shootout$Score_Progression_Home > score_before_home
shootout$Has_Scored_Away = shootout$Score_Progression_Away > score_before_away
team_started_shootout = shootout$Penalty_Number %% 2 == 1
# If the next scored goal is deciding to win
# e.g. after 5 rounds: 1:0, 2:1, 3:2, 4:3,... for starter team, 0:0, 1:1, 2:2, 3:3, 4:4, 5:5,... for non-starter team
score_own = ifelse(shootout$Home_Away == "Home", score_before_home, score_before_away)[team_started_shootout]
score_opponent = ifelse(shootout$Home_Away == "Home", score_before_away, score_before_home)[team_started_shootout]
possible_remaining_goals = pmax(1, 6 - 1:length(score_own))
score_opponent_possible = score_opponent + possible_remaining_goals
shootout[team_started_shootout, "Is_Decisive_To_Win"] = score_own + 1 > score_opponent_possible
score_own = ifelse(shootout$Home_Away == "Home", score_before_home, score_before_away)[!team_started_shootout]
score_opponent = ifelse(shootout$Home_Away == "Home", score_before_away, score_before_home)[!team_started_shootout]
possible_remaining_goals = pmax(0, 5 - 1:length(score_own)) # one less because opponent already shot first
score_opponent_possible = score_opponent + possible_remaining_goals
shootout[!team_started_shootout, "Is_Decisive_To_Win"] = score_own + 1 > score_opponent_possible
# If the next missed goal is deciding to lose
# e.g. after 3 rounds: 1:3 for starter team, 1:3, for non-starter team
score_own = ifelse(shootout$Home_Away == "Home", score_before_home, score_before_away)[team_started_shootout]
score_opponent = ifelse(shootout$Home_Away == "Home", score_before_away, score_before_home)[team_started_shootout]
possible_remaining_goals = pmax(0, 5 - 1:length(score_own))
score_possible = score_own + possible_remaining_goals
shootout[team_started_shootout, "Is_Decisive_To_Lose"] = score_possible < score_opponent
score_own = ifelse(shootout$Home_Away == "Home", score_before_home, score_before_away)[!team_started_shootout]
score_opponent = ifelse(shootout$Home_Away == "Home", score_before_away, score_before_home)[!team_started_shootout]
possible_remaining_goals = pmax(0, 5 - 1:length(score_own))
score_possible = score_own + possible_remaining_goals
shootout[!team_started_shootout, "Is_Decisive_To_Lose"] = score_possible < score_opponent
shootouts[[i]] = shootout
}
library(data.table)
all_shootouts = do.call(rbind, shootouts)
all_shootouts$hasScored = all_shootouts$Has_Scored_Home | all_shootouts$Has_Scored_Away
all_shootouts$team_started_shootout = all_shootouts$Penalty_Number %% 2 == 1
print(mean(all_shootouts$hasScored))
print(data.table(all_shootouts)[, .("Mean True Win" = mean(Is_Decisive_To_Win),
"Mean True Lose" = mean(Is_Decisive_To_Lose)), by = c("team_started_shootout")])
# Winning chance when starting shootout
who_started = sapply(shootouts, function(x) x$Home_Away[1])
dif = sapply(shootouts, function(x) x$Score_Progression_Home[nrow(x)] - x$Score_Progression_Away[nrow(x)])
who_won = ifelse(dif > 0, "Home", "Away")
mean(who_started == who_won)
mean(who_started != who_won)
# Group shootouts by Round Format
df_quarter = all_shootouts[grepl("Quarter-finals", all_shootouts$Matchweek) ,]
df_semi = all_shootouts[grepl("Semi-finals", all_shootouts$Matchweek) ,]
df_round16 = all_shootouts[grepl("Round of 16", all_shootouts$Matchweek) ,]
df_final = all_shootouts[grepl("Final", all_shootouts$Matchweek) | grepl("Gold-medal match", all_shootouts$Matchweek)  ,]
df_thirdplace= all_shootouts[grepl("Third-place match", all_shootouts$Matchweek)   ,]
# Combine means into a single dataframe
means_df = data.frame(
stage = c("Overall", "Round of 16", "Quarter-finals", "Semi-finals", "Third-place match", "Final"),
avg_Success = c(mean(all_shootouts$hasScored), mean(df_round16$hasScored),
mean(df_quarter$hasScored), mean(df_semi$hasScored),
mean(df_thirdplace$hasScored), mean(df_final$hasScored))
)
means_df$stage = factor(means_df$stage,
levels = c("Overall", "Round of 16", "Quarter-finals",
"Semi-finals", "Third-place match", "Final"))
# Create a bar plot
ggplot(means_df, aes(x = stage, y = avg_Success)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = round(avg_Success, 3)), vjust = -0.5) + # Add mean values on top of bars
#theme_minimal() +
labs(title = "",
x = "Tournament stage",
y = "Average success rate")
# Combine means into a single dataframe
means_df = data.frame(
stress = c("Not decisive", "Decisive to win", "Decisive to lose"),
avg_Success = c(mean(all_shootouts$hasScored[!all_shootouts$Is_Decisive_To_Win & !all_shootouts$Is_Decisive_To_Lose]),
mean(all_shootouts$hasScored[all_shootouts$Is_Decisive_To_Win]),
mean(all_shootouts$hasScored[all_shootouts$Is_Decisive_To_Lose])),
size = c(sum(!all_shootouts$Is_Decisive_To_Win & !all_shootouts$Is_Decisive_To_Lose),
sum(all_shootouts$Is_Decisive_To_Win), sum(all_shootouts$Is_Decisive_To_Lose))
) # TODO maybe plot size
# Create a bar plot
ggplot(means_df, aes(x = stress, y = avg_Success)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = round(avg_Success, 3)), vjust = -0.5) + # Add mean values on top of bars
#theme_minimal() +
labs(title = "",
x = "Stress level",
y = "Average success rate")
library(worldfootballR)
library(plyr)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(data.table)
#setwd("C:\\Users\\Helga\\Desktop\\Sports Data\\Shootout2")
all_results = do.call(rbind.fill, lapply(list.files("data/fbref_match_results", full.names = T), readRDS))
View(all_results)
View(all_results)
files = list.files("data/fbref_match_summary", full.names = T)
shots = do.call(rbind.fill, lapply(files, readRDS))
test = readxl::read_xlsx("data/olympics")
test = readxl::read_xlsx("data/olympics.xlsx")
View(test)
shots$Gender = all_results$Gender[match(shots$Game_URL, all_results$MatchURL)]
shots = shots[shots$Event_Type == "Penalty Shootout", ]
shots = shots[order(shots$Game_URL, shots$Penalty_Number),]
test = rbind.fill(shots, test)
View(test)
olympics = readxl::read_xlsx("data/olympics.xlsx")
test = rbind.fill(olympics, shots)
View(test)
View(olympics)
stopifnot(!is.na(olympics$Home_Away))
olympics$Penalty_Number %% 2
olympics$Home_Away = ifelse(olympics$Penalty_Number %% 2 == 1, "Home", "Away")
stopifnot(!is.na(olympics$Home_Away))
files = list.files("data/fbref_match_summary", full.names = T)
shots = do.call(rbind.fill, lapply(files, readRDS))
olympics = readxl::read_xlsx("data/olympics.xlsx")
olympics$Home_Away = ifelse(olympics$Penalty_Number %% 2 == 1, "Home", "Away")
shots = rbind.fill(olympics, shots)
stopifnot(!is.na(shots$Home_Away))
View(shots)
files = list.files("data/fbref_match_summary", full.names = T)
shots = do.call(rbind.fill, lapply(files, readRDS))
shots$Gender = all_results$Gender[match(shots$Game_URL, all_results$MatchURL)]
shots = shots[order(shots$Game_URL, shots$Penalty_Number),]
shots = shots[shots$Event_Type == "Penalty Shootout", ]
olympics = readxl::read_xlsx("data/olympics.xlsx")
olympics$Home_Away = ifelse(olympics$Penalty_Number %% 2 == 1, "Home", "Away")
shots = rbind.fill(olympics, shots)
stopifnot(!is.na(shots$Home_Away))
shootouts = split(shots, shots$Game_URL)
files = list.files("data/fbref_match_summary", full.names = T)
shots = do.call(rbind.fill, lapply(files, readRDS))
shots$Gender = all_results$Gender[match(shots$Game_URL, all_results$MatchURL)]
shots = shots[order(shots$Game_URL, shots$Penalty_Number),]
shots = shots[shots$Event_Type == "Penalty Shootout", ]
# Add manually-entered Men Olympics shootouts which are missing on fbref.com
olympics = readxl::read_xlsx("data/olympics.xlsx")
olympics$Home_Away = ifelse(olympics$Penalty_Number %% 2 == 1, "Home", "Away")
shots = rbind.fill(olympics, shots)
stopifnot(!is.na(shots$Home_Away))
shootouts = split(shots, shots$Game_URL)
# Count the years of shootouts
matchdates = as.Date(sapply(shootouts, function(x) x$Match_Date[1]))
leagues = sapply(shootouts, function(x) x$League[1])
genders = sapply(shootouts, function(x) x$Gender[1])
# Create the bar plot by Year
tab = table(year(matchdates))
data = data.frame(Year = names(tab), Count = as.numeric(tab))
ggplot(data, aes(x = Year, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Penalty Shootouts by Year",
x = "Year",
y = "# Penalty Shootouts")
# Create the bar plot by League
tab = table(leagues)
data = data.frame(League = names(tab), Count = as.numeric(tab))
data = data[order(data$Count),]
ggplot(data, aes(y = reorder(League, Count), x = Count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Penalty Shootouts by League",
x = "# Penalty Shootouts",
y = "League")
# Create the bar plot by Gender
tab = table(genders)
data = data.frame(Gender = ifelse(names(tab) == "F", "Female", "Male"), Count = as.numeric(tab))
ggplot(data, aes(x = Gender, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Penalty Shootouts by Gender",
x = "Gender",
y = "# Penalty Shootouts")
################### iterate through score progression, check which pens were decisive and which scored ###############################
for (i in seq_along(shootouts)) {
shootout = shootouts[[i]]
scores = strsplit(shootout$Score_Progression, ":")
shootout$Score_Progression_Home = as.numeric(sapply(scores, function(x) x[1]))
shootout$Score_Progression_Away = as.numeric(sapply(scores, function(x) x[2]))
score_before_home = c(0, shootout$Score_Progression_Home[-nrow(shootout)])
score_before_away = c(0, shootout$Score_Progression_Away[-nrow(shootout)])
shootout$Has_Scored_Home = shootout$Score_Progression_Home > score_before_home
shootout$Has_Scored_Away = shootout$Score_Progression_Away > score_before_away
team_started_shootout = shootout$Penalty_Number %% 2 == 1
# If the next scored goal is deciding to win
# e.g. after 5 rounds: 1:0, 2:1, 3:2, 4:3,... for starter team, 0:0, 1:1, 2:2, 3:3, 4:4, 5:5,... for non-starter team
score_own = ifelse(shootout$Home_Away == "Home", score_before_home, score_before_away)[team_started_shootout]
score_opponent = ifelse(shootout$Home_Away == "Home", score_before_away, score_before_home)[team_started_shootout]
possible_remaining_goals = pmax(1, 6 - 1:length(score_own))
score_opponent_possible = score_opponent + possible_remaining_goals
shootout[team_started_shootout, "Is_Decisive_To_Win"] = score_own + 1 > score_opponent_possible
score_own = ifelse(shootout$Home_Away == "Home", score_before_home, score_before_away)[!team_started_shootout]
score_opponent = ifelse(shootout$Home_Away == "Home", score_before_away, score_before_home)[!team_started_shootout]
possible_remaining_goals = pmax(0, 5 - 1:length(score_own)) # one less because opponent already shot first
score_opponent_possible = score_opponent + possible_remaining_goals
shootout[!team_started_shootout, "Is_Decisive_To_Win"] = score_own + 1 > score_opponent_possible
# If the next missed goal is deciding to lose
# e.g. after 3 rounds: 1:3 for starter team, 1:3, for non-starter team
score_own = ifelse(shootout$Home_Away == "Home", score_before_home, score_before_away)[team_started_shootout]
score_opponent = ifelse(shootout$Home_Away == "Home", score_before_away, score_before_home)[team_started_shootout]
possible_remaining_goals = pmax(0, 5 - 1:length(score_own))
score_possible = score_own + possible_remaining_goals
shootout[team_started_shootout, "Is_Decisive_To_Lose"] = score_possible < score_opponent
score_own = ifelse(shootout$Home_Away == "Home", score_before_home, score_before_away)[!team_started_shootout]
score_opponent = ifelse(shootout$Home_Away == "Home", score_before_away, score_before_home)[!team_started_shootout]
possible_remaining_goals = pmax(0, 5 - 1:length(score_own))
score_possible = score_own + possible_remaining_goals
shootout[!team_started_shootout, "Is_Decisive_To_Lose"] = score_possible < score_opponent
shootouts[[i]] = shootout
}
View(shootouts)
View(shootouts[["1game"]])
View(shootouts[["6game"]])
all_shootouts = do.call(rbind, shootouts)
all_shootouts$hasScored = all_shootouts$Has_Scored_Home | all_shootouts$Has_Scored_Away
all_shootouts$team_started_shootout = all_shootouts$Penalty_Number %% 2 == 1
print(mean(all_shootouts$hasScored))
print(data.table(all_shootouts)[, .("Mean True Win" = mean(Is_Decisive_To_Win),
"Mean True Lose" = mean(Is_Decisive_To_Lose)), by = c("Home_Away", "team_started_shootout")])
all_shootouts = do.call(rbind, shootouts)
all_shootouts$hasScored = all_shootouts$Has_Scored_Home | all_shootouts$Has_Scored_Away
all_shootouts$team_started_shootout = all_shootouts$Penalty_Number %% 2 == 1
print(mean(all_shootouts$hasScored))
print(data.table(all_shootouts)[, .("Mean True Win" = mean(Is_Decisive_To_Win),
"Mean True Lose" = mean(Is_Decisive_To_Lose)), by = c("Home_Away", "team_started_shootout")])
####### results by tournament stage
df_quarter = all_shootouts[grepl("Quarter-finals", all_shootouts$Matchweek) ,]
df_semi = all_shootouts[grepl("Semi-finals", all_shootouts$Matchweek) ,]
df_round16 = all_shootouts[grepl("Round of 16", all_shootouts$Matchweek) ,]
df_final = all_shootouts[grepl("Final", all_shootouts$Matchweek) | grepl("Gold-medal match", all_shootouts$Matchweek)  ,]
df_thirdplace= all_shootouts[grepl("Third-place match", all_shootouts$Matchweek)   ,]
# Combine means into a single dataframe
means_df = data.frame(
stage = c("Overall", "Round of 16", "Quarter-finals", "Semi-finals", "Third-place match", "Final"),
avg_Success = c(mean(all_shootouts$hasScored), mean(df_round16$hasScored),
mean(df_quarter$hasScored), mean(df_semi$hasScored),
mean(df_thirdplace$hasScored), mean(df_final$hasScored))
)
means_df$stage = factor(means_df$stage,
levels = c("Overall", "Round of 16", "Quarter-finals",
"Semi-finals", "Third-place match", "Final"))
# Create a bar plot
ggplot(means_df, aes(x = stage, y = avg_Success)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = round(avg_Success, 3)), vjust = -0.5) + # Add mean values on top of bars
labs(title = "",
x = "Tournament stage",
y = "Average success rate")
# Combine means into a single dataframe
means_df = data.frame(
stress = c("Not decisive", "Decisive to win", "Decisive to lose"),
avg_Success = c(mean(all_shootouts$hasScored[!all_shootouts$Is_Decisive_To_Win & !all_shootouts$Is_Decisive_To_Lose]),
mean(all_shootouts$hasScored[all_shootouts$Is_Decisive_To_Win]),
mean(all_shootouts$hasScored[all_shootouts$Is_Decisive_To_Lose])),
size = c(sum(!all_shootouts$Is_Decisive_To_Win & !all_shootouts$Is_Decisive_To_Lose),
sum(all_shootouts$Is_Decisive_To_Win), sum(all_shootouts$Is_Decisive_To_Lose))
) # TODO maybe plot size
# Create a bar plot
ggplot(means_df, aes(x = stress, y = avg_Success)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = round(avg_Success, 3)), vjust = -0.5) + # Add mean values on top of bars
labs(title = "",
x = "Stress level",
y = "Average success rate")
####
# Calculate average success rates and sample size by League and Gender
success_rates = all_shootouts %>%
group_by(League, Gender) %>%
summarise(avg_success = mean(hasScored), count = n()) %>%
ungroup()
overall_mean = mean(all_shootouts$hasScored)
success_rates = success_rates %>%
mutate(diff_from_mean = avg_success - overall_mean)
ggplot(success_rates, aes(
x = League,
y = diff_from_mean,
fill = factor(Gender)
)) +
geom_bar(stat = "identity", position = "dodge") +
# geom_text(aes(label = count), position = position_dodge(width = 0.9), hjust = -0.3) +
labs(title = "",
#  subtitle = "Numbers on top of bars represent number of shots in database",
x = "League",
y = "Difference from Overall Mean",
fill = "Gender") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
aggregate(hasScored ~ Gender, all_shootouts, mean)
olympics_men = xlsx::read.xlsx("olympics.xlsx", sheetIndex = 1)
all_shootouts = rbind(all_shootouts, olympics_men)
all_shootouts %>% filter(League == "Olympics - Men's Tournament") %>%
select(League, Gender, Match_Date, Score_Progression)
tab = table(all_results$Round[grepl("won on penalty kicks following", all_results$Notes)])
print(tab)
# Remove games where no shootout possible by rule
results = data.table(all_results[all_results$Round %in% names(tab),])
relative_shootouts = results[, .(Shootouts = mean(grepl("won on penalty kicks following", Notes)) * 100), by = "Competition_Name"]
ggplot(relative_shootouts, aes(y = reorder(Competition_Name, Shootouts), x = Shootouts)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
#theme_minimal() +
labs(title = "% Penalty Shootout happening by League",
x = "Percentage of matches",
y = "League")
# Create the bar plot by League
tab = table(leagues)
data = data.frame(League = names(tab), Count = as.numeric(tab))
data = data[order(data$Count),]
ggplot(data, aes(y = reorder(League, Count), x = Count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Penalty Shootouts by League",
x = "# Penalty Shootouts",
y = "League")
